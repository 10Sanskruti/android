Slip 16

1]
Step 1: Create the First Activity
This activity will contain a button that, when clicked, sends the "Hello" message to the second activity.

java

package com.example.hellointent;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button sendHelloButton = findViewById(R.id.send_hello_button); // Button to trigger sending the message
        sendHelloButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendHelloMessage();
            }
        });
    }

    private void sendHelloMessage() {
        Intent intent = new Intent(this, SecondActivity.class); // Intent to start the second activity
        intent.putExtra("message", "Hello"); // Put the "Hello" message into the Intent
        startActivity(intent); // Start the second activity
    }
}
Step 2: Create the Second Activity
This activity will receive the "Hello" message and display it in a TextView.

java

package com.example.hellointent;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        TextView messageTextView = findViewById(R.id.message_text_view); // TextView to display the message

        // Retrieve the "Hello" message from the Intent
        String message = getIntent().getStringExtra("message");

        if (message != null) {
            messageTextView.setText(message); // Display the message in the TextView
        }
    }
}
Step 3: Create the Layout Files
Define the layout for the first activity with a button to trigger sending the "Hello" message.

Layout for Main Activity (activity_main.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <Button
        android:id="@+id/send_hello_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Send Hello"/>

</LinearLayout>
Layout for Second Activity (activity_second.xml)
Define the layout with a TextView to display the received message.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:id="@+id/message_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Message will be displayed here"
        android:textSize="18sp"/>

</LinearLayout>

2]
Step 1: Create the First Activity
This activity will have an EditText for entering the player's name and a Button to send the name to the second activity.

java

package com.example.playername;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText playerNameInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        playerNameInput = findViewById(R.id.player_name_input); // EditText for entering the player name
        Button sendButton = findViewById(R.id.send_button); // Button to send the name to the second activity

        sendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendPlayerName();
            }
        });
    }

    private void sendPlayerName() {
        String playerName = playerNameInput.getText().toString().trim();

        if (TextUtils.isEmpty(playerName)) {
            Toast.makeText(this, "Please enter a player name.", Toast.LENGTH_SHORT).show();
            return;
        }

        Intent intent = new Intent(this, SecondActivity.class); // Intent to start the second activity
        intent.putExtra("player_name", playerName); // Pass the player name to the second activity
        startActivity(intent);
    }
}
Step 2: Create the Second Activity
This activity will display the player name and have a button to return to the first activity.

java

package com.example.playername;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        TextView playerNameTextView = findViewById(R.id.player_name_text_view); // TextView to display the player name
        Button backButton = findViewById(R.id.back_button); // Button to go back to the first activity

        // Retrieve the player name from the Intent
        String playerName = getIntent().getStringExtra("player_name");
        
        if (playerName != null) {
            playerNameTextView.setText("Player: " + playerName); // Display the player name
        }

        // Handle the BACK button to go back to the first activity
        backButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish(); // Close the current activity to return to the first activity
            }
        });
    }
}
Step 3: Create the Layout Files
Define the layout for the first activity with an EditText for player name input and a Button to send the name to the second activity.

Layout for Main Activity (activity_main.xml)
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <EditText
        android:id="@+id/player_name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter player name"/>

    <Button
        android:id="@+id/send_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Send Name"/>

</LinearLayout>
Layout for Second Activity (activity_second.xml)
Define the layout with a TextView to display the player name and a Button to go back to the first activity.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center">

    <TextView
        android:id="@+id/player_name_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Player Name Will Be Displayed Here"
        android:textSize="18sp"/>

    <Button
        android:id="@+id/back_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="BACK"/>

</LinearLayout>