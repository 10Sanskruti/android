Slip 8

1]
Step 1: Create the Main Activity
In this step, we'll implement the methods that represent the activity life cycle, such as onCreate, onStart, onResume, onPause, onStop, onRestart, and onDestroy. Each method will contain code to show a toast and log a message to help visualize the life cycle.

java

package com.example.activitylifecycle;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ActivityLifeCycle";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(this, "onCreate called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onCreate called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Toast.makeText(this, "onStart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStart called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Toast.makeText(this, "onResume called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onResume called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Toast.makeText(this, "onPause called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onPause called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Toast.makeText(this, "onStop called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStop called");
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        Toast.makeText(this, "onRestart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onRestart called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "onDestroy called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onDestroy called");
    }
}
Step 2: Create the Layout File
The layout can be simple, as the primary focus is on the life cycle methods. However, you can include a basic text view to give the activity some content.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity Life Cycle Demo"
        android:textSize="24sp"/>

</LinearLayout>

2]
Step 1: Define the Database Schema and Helper Class
The database helper class manages the SQLite database, including creating the Customer table and providing methods for inserting records and querying customer details.

java

package com.example.customerapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class CustomerDatabaseHelper extends SQLiteOpenHelper {

    // Constants for the database name, version, and table structure
    private static final String DATABASE_NAME = "CustomerDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_CUSTOMER = "Customer";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_ADDRESS = "address";
    private static = final String COLUMN_PH_NO = "ph_no";

    public CustomerDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Customer table
        String createTableQuery = "CREATE TABLE " + TABLE_CUSTOMER + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_ADDRESS + " TEXT, " +
                COLUMN_PH_NO + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop the table and recreate if the database is upgraded
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CUSTOMER);
        onCreate(db);
    }

    // Insert a new customer record
    public boolean insertCustomer(String name, String address, String ph_no) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_ADDRESS, address);
        values.put(COLUMN_PH_NO, ph_no);

        long result = db.insert(TABLE_CUSTOMER, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all customer records
    public Cursor getAllCustomers() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_CUSTOMER;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
This activity allows you to insert new customer details and show all customer details.

java

package com.example.customerapp;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private CustomerDatabaseHelper dbHelper;
    private EditText nameInput, addressInput, phNoInput;
    private TextView resultView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        dbHelper = new CustomerDatabaseHelper(this);

        nameInput = findViewById(R.id.name_input);
        addressInput = findViewById(R.id.address_input);
        phNoInput = findViewById(R.id.ph_no_input);

        resultView = findViewById(R.id.result_view);

        // Insert button to insert new customer details
        Button insertButton = findViewById(R.id.insert_button);
        insertButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertCustomer();
            }
        });

        // Show button to display all customer details
        Button showAllButton = findViewById(R.id.show_all_button);
        showAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAllCustomers();
            }
        });
    }

    private void insertCustomer() {
        String name = nameInput.getText().toString();
        String address = addressInput.getText().toString();
        String ph_no = phNoInput.getText().toString();

        if (name.isEmpty() || address.isEmpty() || ph_no.isEmpty()) {
            resultView.setText("Please fill in all fields.");
            return;
        }

        if (dbHelper.insertCustomer(name, address, ph_no)) {
            resultView.setText("Customer inserted successfully.");
            // Clear input fields after insertion
            nameInput.setText("");
            addressInput.setText("");
            phNoInput.setText("");
        } else {
            resultView.setText("Error inserting customer.");
        }
    }

    private void showAllCustomers() {
        Cursor cursor = dbHelper.getAllCustomers();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int id = cursor.getInt(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_ID));
                String name = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_NAME));
                String address = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_ADDRESS));
                String ph_no = cursor.getString(cursor.getColumnIndex(CustomerDatabaseHelper.COLUMN_PH_NO));

                sb.append("Customer ID: ").append(id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Address: ").append(address).append("\n");
                sb.append("Phone Number: ").append(ph_no).append("\n");
                sb.append("---------------------------\n");
            } while (cursor.moveToNext());

            resultView.setText(sb.toString());
        } else {
            resultView.setText("No customer records found.");
        }
    }
}
Step 3: Create the Layout File
Define a layout with fields for customer details, buttons to insert and display records, and a text view for results.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer name"/>

    <EditText
        android:id="@+id/address_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer address"/>

    <EditText
        android:id="@+id/ph_no_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter customer phone number"/>

    <Button
        android:id="@+id/insert_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Insert Customer"/>

    <Button
        android:id="@+id/show_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Show All Customers"/>

    <TextView
        android:id="@+id/result_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:paddingTop="16dp"/>

</LinearLayout>