Slip 18

1]
Step 1: Define Resource Files for Colors and Dimensions
These resource files allow for easier customization of colors and font sizes.

res/values/colors.xml
xml

<resources>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="red">#FF0000</color>
    <color name="green">#00FF00</color>
    <color name="blue">#0000FF</color>
</resources>
res/values/dimens.xml
xml

<resources>
    <dimen name="small_text_size">14sp</dimen>
    <dimen name="medium_text_size">18sp</dimen>
    <dimen name="large_text_size">24sp</dimen>
</resources>
Step 2: Create the Main Activity
This activity will contain a TextView to display text, and buttons to change the background color and font size.

java

package com.example.screencolorandfontsize;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private LinearLayout rootLayout; // The root layout to change the background color
    private TextView textView; // The TextView to change the font size

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        rootLayout = findViewById(R.id.root_layout); // The main layout
        textView = findViewById(R.id.text_view); // The TextView to adjust font size and display text

        // Button to change the background color to red
        Button redButton = findViewById(R.id.red_button);
        redButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.RED);
            }
        });

        // Button to change the background color to green
        Button greenButton = findViewById(R.id.green_button);
        greenButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.GREEN);
            }
        });

        // Button to change the background color to blue
        Button blueButton = findViewById(R.id.blue_button);
        blueButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rootLayout.setBackgroundColor(Color.BLUE);
            }
        });

        // Button to set the font size to small
        Button smallFontButton = findViewById(R.id.small_font_button);
        smallFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.small_text_size));
            }
        });

        // Button to set the font size to medium
        Button mediumFontButton = findViewById(R.id.medium_font_button);
        mediumFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.medium_text_size));
            }
        });

        // Button to set the font size to large
        Button largeFontButton = findViewById(R.id.large_font_button);
        largeFontButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                textView.setTextSize(getResources().getDimension(R.dimen.large_text_size));
            }
        });
    }
}
Step 3: Create the Layout File
This layout will contain a LinearLayout for the root, a TextView for displaying text, and buttons to change the background color and font size.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:id="@+id/root_layout"> <!-- Root layout for changing background color -->

    <TextView
        android:id="@+id/text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello, World!"
        android:textSize="18sp"/> <!-- Default font size -->

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/red_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Red"/>

        <Button
            android:id="@+id/green_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Green"/>

        <Button
            android:id="@+id/blue_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Blue"/>

    </LinearLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/small_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Small Font"/>

        <Button
            android:id="@+id/medium_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Medium Font"/>

        <Button
            android:id="@+id/large_font_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Large Font"/>

    </LinearLayout>

</LinearLayout>

2]
Step 1: Create the SQLite Database Helper
Define a helper class to manage the creation and operations on the Project table.

java

package com.example.projectdb;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class ProjectDatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "ProjectDatabase";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_PROJECT = "Project";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_NAME = "name";
    private static final String COLUMN_DEPT = "dept";
    private static final String COLUMN_CITY = "city";

    public ProjectDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create the Project table
        String createTableQuery = "CREATE TABLE " + TABLE_PROJECT + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_NAME + " TEXT, " +
                COLUMN_DEPT + " TEXT, " +
                COLUMN_CITY + " TEXT)";
        db.execSQL(createTableQuery);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT);
        onCreate(db);
    }

    // Add a new record to the Project table
    public boolean addProject(String name, String dept, String city) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_DEPT, dept);
        values.put(COLUMN_CITY, city);

        long result = db.insert(TABLE_PROJECT, null, values);
        return result != -1; // Returns true if insertion was successful
    }

    // Retrieve all records from the Project table
    public Cursor getAllProjects() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_PROJECT;
        return db.rawQuery(query, null);
    }
}
Step 2: Create the Main Activity
This activity will implement the user interface and operations to add records and display all records.

java

package com.example.projectdb;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ProjectDatabaseHelper dbHelper;
    private EditText nameInput, deptInput, cityInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        dbHelper = new ProjectDatabaseHelper(this);

        nameInput = findViewById(R.id.name_input);
        deptInput = findViewById(R.id.dept_input);
        cityInput = findViewById(R.id.city_input);

        Button addButton = findViewById(R.id.add_button); // Button to add new records
        Button displayAllButton = findViewById(R.id.display_all_button); // Button to display all records

        resultText = findViewById(R.id.result_text);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addProject();
            }
        });

        displayAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayAllProjects();
            }
        });
    }

    private void addProject() {
        String name = nameInput.getText().toString();
        String dept = deptInput.getText().toString();
        String city = cityInput.getText().toString();

        if (dbHelper.addProject(name, dept, city)) {
            resultText.setText("Project added successfully.");
        } else {
            resultText.setText("Error adding project.");
        }
    }

    private void displayAllProjects() {
        Cursor cursor = dbHelper.getAllProjects();
        if (cursor != null && cursor.moveToFirst()) {
            StringBuilder sb = new StringBuilder();
            do {
                int id = cursor.getInt(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_ID));
                String name = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_NAME));
                String dept = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_DEPT));
                String city = cursor.getString(cursor.getColumnIndex(ProjectDatabaseHelper.COLUMN_CITY));

                sb.append("ID: ").append(id).append("\n");
                sb.append("Name: ").append(name).append("\n");
                sb.append("Department: ").append(dept).append("\n");
                sb.append("City: ").append(city).append("\n");
                sb.append("---------------------------\n");
            } while (cursor.moveToNext());

            resultText.setText(sb.toString());
        } else {
            resultText.setText("No records found.");
        }
    }
}
Step 3: Create the Layout File
Define the layout with EditText fields for input, and buttons to add new records and display all records.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/name_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Project Name"/>

    <EditText
        android:id="@+id/dept_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Department"/>

    <EditText
        android:id="@+id/city_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter City"/>

    <Button
        android:id="@+id/add_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Add Project"/>

    <Button
        android:id="@+id/display_all_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Display All Projects"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="Results will be displayed here"/>

</LinearLayout>