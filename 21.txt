Slip 21

1]
Step 1: Create the Main Activity
In this step, we'll implement the methods that represent the activity life cycle, such as onCreate, onStart, onResume, onPause, onStop, onRestart, and onDestroy. Each method will contain code to show a toast and log a message to help visualize the life cycle.

java

package com.example.activitylifecycle;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ActivityLifeCycle";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(this, "onCreate called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onCreate called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Toast.makeText(this, "onStart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStart called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Toast.makeText(this, "onResume called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onResume called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Toast.makeText(this, "onPause called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onPause called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Toast.makeText(this, "onStop called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onStop called");
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        Toast.makeText(this, "onRestart called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onRestart called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Toast.makeText(this, "onDestroy called", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onDestroy called");
    }
}
Step 2: Create the Layout File
The layout can be simple, as the primary focus is on the life cycle methods. However, you can include a basic text view to give the activity some content.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity Life Cycle Demo"
        android:textSize="24sp"/>

</LinearLayout>

2]
Step 1: Handle Permissions in AndroidManifest.xml
Ensure the application has permission to write to external storage.

xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.sdcardwriter">

    <application>
        <!-- Your application code -->
    </application>

    <!-- Required permission to write to external storage -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
</manifest>
Step 2: Create the Main Activity
This activity will contain an EditText for user input and a Button to write data to a file on the SD card.

java

package com.example.sdcardwriter;

import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {

    private EditText userInput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedSession);
        setContentView(R.layout.activity_main);

        userInput = findViewById(R.id.user_input); // EditText for user input
        Button writeButton = findViewById(R.id.write_button); // Button to write data to the SD card

        writeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                writeDataToSDCard();
            }
        });
    }

    private void writeDataToSDCard() {
        String data = userInput.getText().toString().trim();

        if (TextUtils.isEmpty(data)) {
            Toast.makeText(this, "Please enter some text.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (!isExternalStorageWritable()) {
            Toast.makeText(this, "SD card not writable or not present.", Toast.LENGTH_SHORT).show();
            return;
        }

        File sdCard = Environment.getExternalStorageDirectory(); // Get the root directory of the SD card
        File myFile = new File(sdCard, "my_data.txt"); // Create a file in the SD card

        try (FileWriter writer = new FileWriter(myFile, true)) { // Open in append mode
            writer.write(data + "\n"); // Write data to the file
            Toast.makeText(this, "Data written to SD card.", Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(this, "Error writing to SD card.", Toast.LENGTH_SHORT).show();
        }
    }

    // Check if the external storage is writable
    private boolean isExternalStorageWritable() {
        String state = Environment.getExternalStorageState();
        return Environment.MEDIA_MOUNTED.equals(state); // Check if the SD card is mounted and writable
    }
}
Step 3: Create the Layout File
This layout includes an EditText for user input and a Button to trigger writing data to the SD card.

res/layout/activity_main.xml
xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/user_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter some text"/>

    <Button
        android:id="@+id/write_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Write to SD Card"/>

</LinearLayout>