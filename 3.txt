Slip 3

1]
Step 1: Create the Main Activity
In this activity, you will handle user input, check if the entered number is an Armstrong number, and display the result.

java

package com.example.armstrongchecker;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText numberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        numberInput = findViewById(R.id.number_input);
        resultText = findViewById(R.id.result_text);

        Button checkButton = findViewById(R.id.check_button);
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkArmstrongNumber();
            }
        });
    }

    private void checkArmstrongNumber() {
        try {
            int number = Integer.parseInt(numberInput.getText().toString());
            boolean isArmstrong = isArmstrongNumber(number);

            if (isArmstrong) {
                resultText.setText(number + " is an Armstrong number.");
            } else {
                resultText.setText(number + " is NOT an Armstrong number.");
            }
        } catch (NumberFormatException e) {
            resultText.setText("Please enter a valid integer.");
        }
    }

    private boolean isArmstrongNumber(int number) {
        int originalNumber = number;
        int sum = 0;
        int numDigits = String.valueOf(number).length(); // Number of digits

        while (number > 0) {
            int digit = number % 10;
            sum += Math.pow(digit, numDigits); // Raise digit to the power of number of digits
            number /= 10;
        }

        return sum == originalNumber;
    }
}
Step 2: Create the Layout File
Create a simple layout with an EditText for user input, a button to trigger the check, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number"
        android:inputType="number"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check if Armstrong"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Result will be displayed here"
        android:textSize="16sp"
        android:paddingTop="16dp"/>

</LinearLayout>

2]
Step 1: Create the Main Activity
The main activity manages user input and checks the phone number against the specified format.

java

package com.example.phonevalidator;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText phoneNumberInput;
    private TextView resultText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        phoneNumberInput = findViewById(R.id.phone_number_input);
        resultText = findViewById(R.id.result_text);

        Button checkButton = findViewById(R.id.check_button);
        checkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkPhoneNumber();
            }
        });
    }

    // Function to check if the phone number has a valid area code and length
    private void checkPhoneNumber() {
        String phoneNumber = phoneNumberInput.getText().toString().trim();

        if (phoneNumber.isEmpty()) {
            resultText.setText("Please enter a phone number.");
            return;
        }

        if (isValidPhoneNumber(phoneNumber)) {
            resultText.setText("The phone number is valid.");
        } else {
            resultText.setText("The phone number is invalid.");
        }
    }

    // Function to validate the phone number format
    private boolean isValidPhoneNumber(String phoneNumber) {
        // Valid area codes
        String[] validAreaCodes = {"040", "041", "050", "0400", "044"};

        // Check if it starts with a valid area code
        boolean isValidAreaCode = false;
        for (String areaCode : validAreaCodes) {
            if (phoneNumber.startsWith(areaCode)) {
                isValidAreaCode = true;
                break;
            }
        }

        if (!isValidAreaCode) {
            return false;
        }

        // Check the length (total length should be between 9 and 11 digits)
        int minLength = 9; // 6 digits + 3-digit area code
        int maxLength = 11; // 8 digits + 3-digit area code

        int length = phoneNumber.length();
        return length >= minLength && length <= maxLength;
    }
}
Step 2: Create the Layout File
Design a simple layout with an EditText for user input, a button to check the phone number, and a TextView to display the result.

xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/phone_number_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a phone number"
        android:inputType="phone"/>

    <Button
        android:id="@+id/check_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Check Phone Number"/>

    <TextView
        android:id="@+id/result_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Result will be displayed here"
        android:paddingTop="16dp"/>

</LinearLayout>
